#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏ CheckMate
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
"""

import os
import glob
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path

class LogCleaner:
    def __init__(self, log_file_path=None, max_size_mb=10):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
        if log_file_path is None:
            if os.path.exists('checkmate.log') and not os.path.isdir('checkmate.log'):
                log_file_path = 'checkmate.log'
            elif os.path.exists('logs/checkmate.log'):
                log_file_path = 'logs/checkmate.log'
            else:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs('logs', exist_ok=True)
                log_file_path = 'logs/checkmate.log'
        
        self.log_file_path = log_file_path
        self.max_size_mb = max_size_mb
        self.logger = logging.getLogger(__name__)
    
    def get_log_size_mb(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        try:
            if os.path.exists(self.log_file_path):
                size_bytes = os.path.getsize(self.log_file_path)
                size_mb = size_bytes / (1024 * 1024)
                return round(size_mb, 2)
            return 0
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–∞: {e}")
            return 0
    
    def get_log_files(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ (–≤–∫–ª—é—á–∞—è —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)"""
        try:
            log_pattern = f"{self.log_file_path}*"
            log_files = glob.glob(log_pattern)
            return sorted(log_files)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤: {e}")
            return []
    
    def clear_log_completely(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥-—Ñ–∞–π–ª"""
        try:
            if os.path.exists(self.log_file_path):
                # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                with open(self.log_file_path, 'w', encoding='utf-8') as f:
                    f.write("")
                self.logger.info(f"–õ–æ–≥-—Ñ–∞–π–ª {self.log_file_path} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
                return True
            else:
                self.logger.info(f"–õ–æ–≥-—Ñ–∞–π–ª {self.log_file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
            return False
    
    def remove_old_rotated_logs(self, days_old=2):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã"""
        try:
            removed_count = 0
            cutoff_time = time.time() - (days_old * 24 * 60 * 60)
            
            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∏–º–µ–Ω–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞
            log_pattern = f"{self.log_file_path}.*"
            old_log_files = glob.glob(log_pattern)
            
            for log_file in old_log_files:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                    file_mtime = os.path.getmtime(log_file)
                    if file_mtime < cutoff_time:
                        os.remove(log_file)
                        self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª: {log_file}")
                        removed_count += 1
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {log_file}: {e}")
            
            if removed_count > 0:
                self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")
            else:
                self.logger.info("–°—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return removed_count
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")
            return 0
    
    def check_and_rotate_if_needed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–æ—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            current_size = self.get_log_size_mb()
            
            if current_size > self.max_size_mb:
                self.logger.warning(f"–†–∞–∑–º–µ—Ä –ª–æ–≥–∞ {current_size}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {self.max_size_mb}MB")
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"{self.log_file_path}.{timestamp}"
                
                try:
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥
                    os.rename(self.log_file_path, backup_name)
                    self.logger.info(f"–õ–æ–≥-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_name}")
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
                    self.remove_old_rotated_logs(days_old=2)
                    
                    return True
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–∞: {e}")
                    return False
            else:
                self.logger.info(f"–†–∞–∑–º–µ—Ä –ª–æ–≥–∞ {current_size}MB –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
                return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–∞: {e}")
            return False
    
    def get_log_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–æ–≥–∞–º"""
        try:
            stats = {
                'main_log_size_mb': self.get_log_size_mb(),
                'main_log_exists': os.path.exists(self.log_file_path),
                'log_files': self.get_log_files(),
                'total_log_files': 0,
                'total_size_mb': 0
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
            total_size_bytes = 0
            for log_file in stats['log_files']:
                try:
                    total_size_bytes += os.path.getsize(log_file)
                except:
                    pass
            
            stats['total_log_files'] = len(stats['log_files'])
            stats['total_size_mb'] = round(total_size_bytes / (1024 * 1024), 2)
            
            return stats
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤: {e}")
            return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏"""
    print("=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ê–ú–ò CHECKMATE ===")
    print()
    
    cleaner = LogCleaner()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = cleaner.get_log_statistics()
    
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í:")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: {stats.get('main_log_size_mb', 0)} MB")
    print(f"   –í—Å–µ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤: {stats.get('total_log_files', 0)}")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_size_mb', 0)} MB")
    print()
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥")
    print("2. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")
    print("5. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
    
    if choice == "1":
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞...")
        if cleaner.clear_log_completely():
            print("‚úÖ –õ–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞")
    
    elif choice == "2":
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤...")
        removed = cleaner.remove_old_rotated_logs()
        if removed > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")
        else:
            print("‚ÑπÔ∏è  –°—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    elif choice == "3":
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤...")
        if cleaner.check_and_rotate_if_needed():
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Ä–æ—Ç–∞—Ü–∏–∏")
    
    elif choice == "4":
        print("\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –õ–û–ì-–§–ê–ô–õ–û–í:")
        log_files = stats.get('log_files', [])
        if log_files:
            for i, log_file in enumerate(log_files, 1):
                try:
                    size_mb = round(os.path.getsize(log_file) / (1024 * 1024), 2)
                    mtime = datetime.fromtimestamp(os.path.getmtime(log_file))
                    print(f"   {i}. {log_file} - {size_mb} MB - {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
                except:
                    print(f"   {i}. {log_file} - –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        else:
            print("   –õ–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    elif choice == "5":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 