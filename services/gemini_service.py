import re
import time
import logging
import os
import asyncio
import aiofiles
import google.generativeai as genai
from requests.exceptions import Timeout, ConnectionError
from config import GEMINI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
genai.configure(api_key=GEMINI_API_KEY)

async def check_with_gemini(user_data: dict, status_callback=None) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ Gemini API"""
    task_number = user_data['task_number']
    task_description = user_data['task_description']
    task_solution = user_data['task_solution']
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_number}")
    logger.info(f"–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è: {task_description[:50]}...")
    logger.info(f"–†–µ—à–µ–Ω–∏–µ: {task_solution[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38
    has_graph_image = 'graph_image_id' in user_data and task_number == "38"
    if has_graph_image:
        logger.info(f"–ó–∞–¥–∞–Ω–∏–µ 38 –≤–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (ID: {user_data['graph_image_id']})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OCR-—Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38
    graph_ocr_text = user_data.get('graph_ocr_text', '')
    if graph_ocr_text and task_number == "38":
        logger.info(f"–ò–º–µ–µ—Ç—Å—è OCR-—Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª–∏–Ω–æ–π {len(graph_ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Gemini 2.5 Flash Preview")
    model = genai.GenerativeModel('gemini-2.5-flash-preview-04-17')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generation_config = {
        "temperature": 0.4,
        "top_p": 0.95,
        "top_k": 0,
        "max_output_tokens": 8192,
    }
    
    try:
        if task_number == "37":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 37
            if status_callback:
                await status_callback("üìä –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤...")
            
            # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Ä–µ—à–µ–Ω–∏–∏
            words = re.findall(r'\b\w+\b', task_solution)
            word_count = len(words)
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {word_count}")
            
            original_word_count = word_count
            truncation_notice = ""
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 154, –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
            if word_count > 154:
                logger.info(f"–û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç —Å {word_count} –¥–æ 154 —Å–ª–æ–≤")
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 154 —Å–ª–æ–≤–∞
                truncated_words = words[:154]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                pattern = r'\b(' + '|'.join(re.escape(word) for word in truncated_words) + r')\b'
                matches = list(re.finditer(pattern, task_solution))
                if matches and len(matches) >= 154:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
                    last_match = matches[153]
                    end_pos = last_match.end()
                    task_solution = task_solution[:end_pos]
                else:
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                    task_solution = ' '.join(truncated_words)
                
                word_count = 154
                truncation_notice = f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ 154 —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {original_word_count}).\n\n"
                logger.info(f"–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω. –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞: {len(task_solution)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 90 —Å–ª–æ–≤, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –±–∞–ª–ª–æ–≤
            if word_count < 90:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count} < 90. –í—ã—Å—Ç–∞–≤–ª—è–µ–º 0 –±–∞–ª–ª–æ–≤.")
                error_msg = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ ({word_count}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ (90).\n\n–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∑–∞ —Ç–∞–∫—É—é —Ä–∞–±–æ—Ç—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è 0 –±–∞–ª–ª–æ–≤."
                # –î–ª—è –∑–∞–¥–∞–Ω–∏—è 37 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
                extra_info = {
                    "scores": [0, 0, 0],
                    "responses": ["", "", ""]
                }
                return 0, error_msg, extra_info
            
            # –î–ª—è –∑–∞–¥–∞–Ω–∏—è 37 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 37")
            all_responses = []
            scores = [0, 0, 0]  # –û—Ü–µ–Ω–∫–∏ –ø–æ —Ç—Ä–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: –Ω–∞—á–∏–Ω–∞–µ–º
            if status_callback:
                await status_callback("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É... (0%)")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç—Ä–µ–º –ø—Ä–æ–º–ø—Ç–∞–º
            for i in range(1, 4):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if status_callback:
                    await status_callback(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É... –®–∞–≥ {i}/3 ({i*33}%)")
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ {i}/3")
                prompt_path = f"prompts/prompt{i}.txt"
                
                if not os.path.exists(prompt_path):
                    logger.error(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}")
                    error_msg = f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}"
                    extra_info = {
                        "scores": [0, 0, 0],
                        "responses": ["", "", ""]
                    }
                    return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", error_msg, extra_info
                
                async with aiofiles.open(prompt_path, "r", encoding="utf-8") as file:
                    prompt_template = await file.read()
                
                # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
                prompt = prompt_template.replace("[–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º]", task_description)
                prompt = prompt.replace("[–¢–µ–∫—Å—Ç –µ–º–µ–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º]", task_solution)
                
                logger.info(f"–ü—Ä–æ–º–ø—Ç {i} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞ {i}: {prompt[:100]}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–ø—Ä–æ–º–ø—Ç {i})")
                start_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if status_callback:
                    await status_callback(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ AI... –®–∞–≥ {i}/3 ({i*33}%)")
                
                max_retries = 3
                retry_delay = 5  # —Å–µ–∫—É–Ω–¥
                
                for attempt in range(max_retries):
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                        if attempt > 0 and status_callback:
                            await status_callback(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}... –®–∞–≥ {i}/3 ({i*33}%)")
                        
                        response = model.generate_content(
                            prompt,
                            generation_config=generation_config
                        )
                        
                        elapsed_time = time.time() - start_time
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–ø—Ä–æ–º–ø—Ç {i}), –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                        logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:100]}...")
                        all_responses.append(response.text)
                        break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
                        
                    except (Timeout, ConnectionError) as e:
                        if attempt < max_retries - 1:
                            delay = retry_delay * (attempt + 1)
                            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini (–ø—Ä–æ–º–ø—Ç {i}), –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(delay)
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
                            raise
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ {i}: {str(e)}")
                        if attempt < max_retries - 1:
                            delay = retry_delay * (attempt + 1)
                            logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(delay)
                        else:
                            raise
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                if status_callback:
                    await status_callback(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç... –®–∞–≥ {i}/3 ({i*33}%)")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
                response_text = response.text
                
                if i == 1:
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏—â–µ–º "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: X" –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–∫—Ä–∏—Ç–µ—Ä–∏–π 1)")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    score_matches = re.search(r'–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    if not score_matches:
                        score_matches = re.search(r'–∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    if not score_matches:
                        score_matches = re.search(r'–ò–¢–û–ì–û–í–´–ô –ë–ê–õ–õ:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    if not score_matches:
                        # –ò—â–µ–º –ª—é–±–æ–π –±–∞–ª–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–±–∑–∞—Ü–µ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
                        last_section = response_text.split("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")[-1] if "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê" in response_text else response_text
                        score_matches = re.search(r'(\d+)\s*–±–∞–ª–ª', last_section)
                        
                    if score_matches:
                        scores[0] = int(score_matches.group(1))
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é 1: {scores[0]}")
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ü–µ–Ω–∫—É –≤ –ø–µ—Ä–≤–æ–º –ø—Ä–æ–º–ø—Ç–µ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1")
                        scores[0] = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                elif i == 2:
                    # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏—â–µ–º "–ë–∞–ª–ª: X" –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–∫—Ä–∏—Ç–µ—Ä–∏–π 2)")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    score_matches = re.search(r'–ë–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    if not score_matches:
                        score_matches = re.search(r'–ø–æ–ª—É—á–∞–µ—Ç\s*\*\*(\d+)\s*–±–∞–ª–ª', response_text)
                    if not score_matches:
                        score_matches = re.search(r'–æ—Ü–µ–Ω–∫–∞:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    
                    if score_matches:
                        scores[1] = int(score_matches.group(1))
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é 2: {scores[1]}")
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ü–µ–Ω–∫—É –≤–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–æ–º–ø—Ç–µ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1")
                        scores[1] = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                elif i == 3:
                    # –î–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏—â–µ–º "–û–±—â–∏–π –±–∞–ª–ª: X" –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–∫—Ä–∏—Ç–µ—Ä–∏–π 3)")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê" in response_text:
                        logger.info("–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è 3")
                        –∏—Ç–æ–≥–æ–≤–∞—è_–æ—Ü–µ–Ω–∫–∞_–±–ª–æ–∫ = response_text.split("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")[1].split("\n\n")[0]
                        –æ–±—â–∏–π_–±–∞–ª–ª_match = re.search(r'–û–±—â–∏–π –±–∞–ª–ª:?\s*(\d+)', –∏—Ç–æ–≥–æ–≤–∞—è_–æ—Ü–µ–Ω–∫–∞_–±–ª–æ–∫)
                        if –æ–±—â–∏–π_–±–∞–ª–ª_match:
                            scores[2] = int(–æ–±—â–∏–π_–±–∞–ª–ª_match.group(1))
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é 3 –≤ –±–ª–æ–∫–µ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {scores[2]}")
                            continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    score_matches = re.search(r'–û–±—â–∏–π –±–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    if not score_matches:
                        score_matches = re.search(r'–æ–±—â–∏–π –±–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    if not score_matches:
                        score_matches = re.search(r'–û–ë–©–ò–ô –ë–ê–õ–õ:?\s*(\d+)(?:\s*–±–∞–ª–ª|\.|\s|$)', response_text)
                    
                    if score_matches:
                        scores[2] = int(score_matches.group(1))
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é 3: {scores[2]}")
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ü–µ–Ω–∫—É –≤ —Ç—Ä–µ—Ç—å–µ–º –ø—Ä–æ–º–ø—Ç–µ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1")
                        scores[2] = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π - –µ—Å–ª–∏ 0, —Ç–æ –≤—Å—è —Ä–∞–±–æ—Ç–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –≤ 0 –±–∞–ª–ª–æ–≤
            if scores[0] == 0:
                logger.info("–û—Ü–µ–Ω–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é —Ä–∞–≤–Ω–∞ 0, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º 0 –∑–∞ –≤—Å—é —Ä–∞–±–æ—Ç—É")
                final_score = 0
                scores_info = truncation_notice
                scores_info += f"–¢–∞–∫ –∫–∞–∫ –æ—Ü–µ–Ω–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é (–†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏) —Ä–∞–≤–Ω–∞ 0, –∑–∞ –≤—Å—é —Ä–∞–±–æ—Ç—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è 0 –±–∞–ª–ª–æ–≤.\n\n"
                scores_info += f"–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n1. –†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {scores[0]}\n2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {scores[1]}\n3. –Ø–∑—ã–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {scores[2]}\n\n–û–±—â–∏–π –±–∞–ª–ª: {final_score}\n\n---\n\n"
            else:
                # –°—É–º–º–∏—Ä—É–µ–º –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                final_score = sum(scores)
                logger.info(f"–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {scores}. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_score}")
                scores_info = truncation_notice
                scores_info += f"–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n1. –†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {scores[0]}\n2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {scores[1]}\n3. –Ø–∑—ã–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {scores[2]}\n\n–û–±—â–∏–π –±–∞–ª–ª: {final_score}\n\n---\n\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            if status_callback:
                await status_callback("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å —è–≤–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–æ–≤
            combined_response = scores_info
            combined_response += "üìù –ö–†–ò–¢–ï–†–ò–ô 1: –†–ï–®–ï–ù–ò–ï –ö–û–ú–ú–£–ù–ò–ö–ê–¢–ò–í–ù–û–ô –ó–ê–î–ê–ß–ò\n\n" + all_responses[0] + "\n\n"
            combined_response += "üî† –ö–†–ò–¢–ï–†–ò–ô 2: –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê\n\n" + all_responses[1] + "\n\n"
            combined_response += "üìö –ö–†–ò–¢–ï–†–ò–ô 3: –Ø–ó–´–ö–û–í–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï\n\n" + all_responses[2]
            
            # –î–ª—è –∑–∞–¥–∞–Ω–∏—è 37 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
            extra_info = {
                "scores": scores,
                "responses": all_responses
            }
            
            return final_score, combined_response, extra_info
        
        elif task_number == "38":
            # –î–ª—è –∑–∞–¥–∞–Ω–∏—è 38 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ (–≤—Å–µ–≥–æ 5)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38 (–≤—Å–µ–≥–æ 5)")
            all_responses = []
            scores = [0, 0, 0, 0, 0]  # –û—Ü–µ–Ω–∫–∏ –ø–æ –ø—è—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38
            if status_callback:
                await status_callback("üìä –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤...")
            
            # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Ä–µ—à–µ–Ω–∏–∏
            words = re.findall(r'\b\w+\b', task_solution)
            word_count = len(words)
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {word_count}")
            
            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 180 —Å–ª–æ–≤, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –±–∞–ª–ª–æ–≤
            if word_count < 180:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38: {word_count} < 180. –í—ã—Å—Ç–∞–≤–ª—è–µ–º 0 –±–∞–ª–ª–æ–≤.")
                return 0, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ ({word_count}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ (180).\n\n–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∑–∞ —Ç–∞–∫—É—é —Ä–∞–±–æ—Ç—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è 0 –±–∞–ª–ª–æ–≤."
            
            original_word_count = word_count
            truncation_notice = ""
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 275, –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
            if word_count > 275:
                logger.info(f"–û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç —Å {word_count} –¥–æ 275 —Å–ª–æ–≤")
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 275 —Å–ª–æ–≤
                truncated_words = words[:275]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                pattern = r'\b(' + '|'.join(re.escape(word) for word in truncated_words) + r')\b'
                matches = list(re.finditer(pattern, task_solution))
                if matches and len(matches) >= 275:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
                    last_match = matches[274]
                    end_pos = last_match.end()
                    task_solution = task_solution[:end_pos]
                else:
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                    task_solution = ' '.join(truncated_words)
                
                word_count = 275
                truncation_notice = f"‚ö†Ô∏è –í–∞—à —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ 275 —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {original_word_count}).\n\n"
                logger.info(f"–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω. –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞: {len(task_solution)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: –Ω–∞—á–∏–Ω–∞–µ–º
            if status_callback:
                await status_callback("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É... (0%)")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—è—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞–º
            for i in range(1, 6):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if status_callback:
                    await status_callback(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É... –®–∞–≥ {i}/5 ({i*20}%)")
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ {i}/5 –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38")
                prompt_path = f"prompts/prompt38_{i}.txt"
                
                if not os.path.exists(prompt_path):
                    logger.error(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}")
                    return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}"
                
                async with aiofiles.open(prompt_path, "r", encoding="utf-8") as file:
                    prompt_template = await file.read()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞—Ñ–∏–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                graph_info = ""
                if has_graph_image and graph_ocr_text:
                    graph_info = f"\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞:\n{graph_ocr_text}"
                
                # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
                prompt = prompt_template.replace("[–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º]", task_description)
                prompt = prompt.replace("[–¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º]", task_solution)
                prompt = prompt.replace("[–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞]", graph_info)
                
                logger.info(f"–ü—Ä–æ–º–ø—Ç {i} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38 –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞ {i}: {prompt[:100]}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–ø—Ä–æ–º–ø—Ç {i} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38)")
                start_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if status_callback:
                    await status_callback(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ AI... –®–∞–≥ {i}/5 ({i*20}%)")
                
                max_retries = 3
                retry_delay = 5  # —Å–µ–∫—É–Ω–¥
                
                for attempt in range(max_retries):
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                        if attempt > 0 and status_callback:
                            await status_callback(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}... –®–∞–≥ {i}/5 ({i*20}%)")
                        
                        response = model.generate_content(
                            prompt,
                            generation_config=generation_config
                        )
                        
                        elapsed_time = time.time() - start_time
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–ø—Ä–æ–º–ø—Ç {i} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38), –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                        logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:100]}...")
                        all_responses.append(response.text)
                        break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
                        
                    except (Timeout, ConnectionError) as e:
                        if attempt < max_retries - 1:
                            delay = retry_delay * (attempt + 1)
                            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini (–ø—Ä–æ–º–ø—Ç {i} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38), –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(delay)
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
                            raise
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞ {i} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38: {str(e)}")
                        if attempt < max_retries - 1:
                            delay = retry_delay * (attempt + 1)
                            logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(delay)
                        else:
                            raise
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                if status_callback:
                    await status_callback(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç... –®–∞–≥ {i}/5 ({i*20}%)")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
                response_text = response.text
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}")
                logger.info(f"–ö–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}: ...{response_text[-200:]}")
                
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–ª–æ–∫–µ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
                score_found = False
                if "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê" in response_text:
                    logger.info(f"–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}")
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
                    –∏—Ç–æ–≥–æ–≤–∞—è_–±–ª–æ–∫–∏ = response_text.split("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
                    if len(–∏—Ç–æ–≥–æ–≤–∞—è_–±–ª–æ–∫–∏) > 1:
                        # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê"
                        –∏—Ç–æ–≥–æ–≤–∞—è_—Ç–µ–∫—Å—Ç = –∏—Ç–æ–≥–æ–≤–∞—è_–±–ª–æ–∫–∏[1]
                        
                        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                        –∏—Ç–æ–≥–æ–≤–∞—è_—Ç–µ–∫—Å—Ç = –∏—Ç–æ–≥–æ–≤–∞—è_—Ç–µ–∫—Å—Ç.lstrip('\n\r\t ')
                        
                        # –ë–µ—Ä–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–≤–æ–π–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ (–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–ª–ª–∞)
                        –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è_—á–∞—Å—Ç–∏ = –∏—Ç–æ–≥–æ–≤–∞—è_—Ç–µ–∫—Å—Ç.split("\n\n")
                        –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è = –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è_—á–∞—Å—Ç–∏[0]
                        
                        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –±–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞
                        if len(–∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è) < 50 and len(–∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è_—á–∞—Å—Ç–∏) > 1:
                            –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è = –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è + "\n\n" + –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è_—á–∞—Å—Ç–∏[1]
                        
                        logger.info(f"–°–µ–∫—Ü–∏—è –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}: {–∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è}")
                        
                        # –ò—â–µ–º "–ë–∞–ª–ª: X" –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏
                        –±–∞–ª–ª_match = re.search(r'–ë–∞–ª–ª:?\s*(\d+)', –∏—Ç–æ–≥–æ–≤–∞—è_—Å–µ–∫—Ü–∏—è)
                        if –±–∞–ª–ª_match:
                            scores[i-1] = int(–±–∞–ª–ª_match.group(1))
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i} –≤ –±–ª–æ–∫–µ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {scores[i-1]}")
                            score_found = True
                        else:
                            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '–ë–∞–ª–ª: X' –≤ —Å–µ–∫—Ü–∏–∏ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–ª–æ–∫–µ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if not score_found:
                    logger.info(f"–ü–æ–∏—Å–∫ –æ—Ü–µ–Ω–∫–∏ –æ–±—â–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i}")
                    # –û–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
                    score_patterns = [
                        r'–ë–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\s*–∏–∑\s*\d+|\.|\s|$)',
                        r'–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\s*–∏–∑\s*\d+|\.|\s|$)',
                        r'–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª:?\s*(\d+)(?:\s*–±–∞–ª–ª|\s*–∏–∑\s*\d+|\.|\s|$)',
                        r'–û–¶–ï–ù–ö–ê:?\s*(\d+)(?:\s*–±–∞–ª–ª|\s*–∏–∑\s*\d+|\.|\s|$)',
                        r'–û—Ü–µ–Ω–∫–∞:?\s*(\d+)(?:\s*–±–∞–ª–ª|\s*–∏–∑\s*\d+|\.|\s|$)',
                        r'–ø–æ–ª—É—á–∞–µ—Ç\s*\*\*(\d+)\s*–±–∞–ª–ª'
                    ]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                    for pattern in score_patterns:
                        score_matches = re.search(pattern, response_text)
                        if score_matches:
                            scores[i-1] = int(score_matches.group(1))
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è {i} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '{pattern}': {scores[i-1]}")
                            score_found = True
                            break
                
                if not score_found:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ü–µ–Ω–∫—É –≤ –ø—Ä–æ–º–ø—Ç–µ {i} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1")
                    scores[i-1] = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π - –µ—Å–ª–∏ 0, —Ç–æ –≤—Å—è —Ä–∞–±–æ—Ç–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –≤ 0 –±–∞–ª–ª–æ–≤
            if scores[0] == 0:
                logger.info("–û—Ü–µ–Ω–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é —Ä–∞–≤–Ω–∞ 0, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º 0 –∑–∞ –≤—Å—é —Ä–∞–±–æ—Ç—É")
                final_score = 0
                scores_info = truncation_notice  # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–µ–∑–∫–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                scores_info += f"–¢–∞–∫ –∫–∞–∫ –æ—Ü–µ–Ω–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é (–†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏) —Ä–∞–≤–Ω–∞ 0, –∑–∞ –≤—Å—é —Ä–∞–±–æ—Ç—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è 0 –±–∞–ª–ª–æ–≤.\n\n"
                scores_info += f"–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
                scores_info += f"1. –†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {scores[0]}\n"
                scores_info += f"2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {scores[1]}\n"
                scores_info += f"3. –Ø–∑—ã–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–ª–µ–∫—Å–∏–∫–∞): {scores[2]}\n"
                scores_info += f"4. –Ø–∑—ã–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞): {scores[3]}\n"
                scores_info += f"5. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è: {scores[4]}\n\n"
                scores_info += f"–û–±—â–∏–π –±–∞–ª–ª: {final_score}\n\n---\n\n"
            else:
                # –°—É–º–º–∏—Ä—É–µ–º –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                final_score = sum(scores)
                logger.info(f"–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–∑–∞–¥–∞–Ω–∏–µ 38): {scores}. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_score}")
            
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –±–∞–ª–ª–æ–≤
                scores_info = truncation_notice  # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–µ–∑–∫–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                scores_info += f"–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
                scores_info += f"1. –†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {scores[0]}\n"
                scores_info += f"2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {scores[1]}\n"
                scores_info += f"3. –Ø–∑—ã–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–ª–µ–∫—Å–∏–∫–∞): {scores[2]}\n"
                scores_info += f"4. –Ø–∑—ã–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞): {scores[3]}\n"
                scores_info += f"5. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è: {scores[4]}\n\n"
                scores_info += f"–û–±—â–∏–π –±–∞–ª–ª: {final_score}\n\n---\n\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            if status_callback:
                await status_callback("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å —è–≤–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–æ–≤
            combined_response = scores_info
            combined_response += "ÔøΩÔøΩ –ö–†–ò–¢–ï–†–ò–ô 1: –†–ï–®–ï–ù–ò–ï –ö–û–ú–ú–£–ù–ò–ö–ê–¢–ò–í–ù–û–ô –ó–ê–î–ê–ß–ò\n\n" + all_responses[0] + "\n\n"
            combined_response += "üî† –ö–†–ò–¢–ï–†–ò–ô 2: –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê\n\n" + all_responses[1] + "\n\n"
            combined_response += "üìö –ö–†–ò–¢–ï–†–ò–ô 3: –Ø–ó–´–ö–û–í–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï (–õ–ï–ö–°–ò–ö–ê)\n\n" + all_responses[2] + "\n\n"
            combined_response += "üìñ –ö–†–ò–¢–ï–†–ò–ô 4: –Ø–ó–´–ö–û–í–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï (–ì–†–ê–ú–ú–ê–¢–ò–ö–ê)\n\n" + all_responses[3] + "\n\n"
            combined_response += "‚úèÔ∏è –ö–†–ò–¢–ï–†–ò–ô 5: –û–†–§–û–ì–†–ê–§–ò–Ø –ò –ü–£–ù–ö–¢–£–ê–¶–ò–Ø\n\n" + all_responses[4]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º extra_info –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38
            extra_info = {
                "scores": scores,
                "responses": all_responses
            }
            
            return final_score, combined_response, extra_info
            
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_number}")
            prompt = f"""
            –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_number}.
            
            –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è:
            {task_description}
            
            –†–µ—à–µ–Ω–∏–µ:
            {task_solution}
            
            –û—Ü–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ. –í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10).
            """
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini")
            start_time = time.time()
            
            max_retries = 3
            retry_delay = 5  # —Å–µ–∫—É–Ω–¥
            
            for attempt in range(max_retries):
                try:
                    response = model.generate_content(
                        prompt,
                        generation_config=generation_config
                    )
                    
                    elapsed_time = time.time() - start_time
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                    break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
                    
                except (Timeout, ConnectionError) as e:
                    if attempt < max_retries - 1:
                        delay = retry_delay * (attempt + 1)
                        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(delay)
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
                        raise
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {str(e)}")
                    if attempt < max_retries - 1:
                        delay = retry_delay * (attempt + 1)
                        logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(delay)
                    else:
                        raise
            
            response_text = response.text.strip()
            logger.info(f"–û—Ç–≤–µ—Ç Gemini: {response_text}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
            score_matches = re.search(r'(\d+(?:\.\d+)?)\s*(?:–±–∞–ª–ª|–∏–∑|\/|\s*10)', response_text)
            if score_matches:
                score = score_matches.group(1)
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X –±–∞–ª–ª–æ–≤", –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É –≤ –Ω–∞—á–∞–ª–µ
                score_matches = re.search(r'^\s*(\d+(?:\.\d+)?)', response_text)
                if score_matches:
                    score = score_matches.group(1)
                else:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≤—Å—Ç—Ä–µ—á–∞—é—â—É—é—Å—è —Ü–∏—Ñ—Ä—É
                    digits = re.findall(r'\b(\d+(?:\.\d+)?)\b', response_text)
                    if digits:
                        score = digits[0]
                    else:
                        score = "7"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞: {score}")
            return score, response_text
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Gemini API: {e}"
        logger.error(error_msg)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if status_callback:
            await status_callback("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        
        return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", error_msg 