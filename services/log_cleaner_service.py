#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –¥–ª—è CheckMate
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è
"""

import asyncio
import logging
from datetime import datetime, timedelta
from utils.log_cleaner import LogCleaner

class LogCleanerService:
    def __init__(self, cleanup_interval_hours=48):  # 48 —á–∞—Å–æ–≤ = 2 –¥–Ω—è
        self.cleanup_interval_hours = cleanup_interval_hours
        self.cleanup_interval_seconds = cleanup_interval_hours * 3600
        self.log_cleaner = LogCleaner()
        self.logger = logging.getLogger(__name__)
        self.is_running = False
    
    async def start_background_cleanup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
        if self.is_running:
            self.logger.warning("–°–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.logger.info(f"üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ {self.cleanup_interval_hours} —á–∞—Å–æ–≤")
        
        try:
            while self.is_running:
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(self.cleanup_interval_seconds)
                
                if not self.is_running:
                    break
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
                await self.perform_cleanup()
        
        except asyncio.CancelledError:
            self.logger.info("–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
        finally:
            self.is_running = False
    
    async def perform_cleanup(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
        try:
            self.logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
            stats_before = self.log_cleaner.get_log_statistics()
            size_before = stats_before.get('total_size_mb', 0)
            files_before = stats_before.get('total_log_files', 0)
            
            self.logger.info(f"üìä –î–æ –æ—á–∏—Å—Ç–∫–∏: {files_before} —Ñ–∞–π–ª–æ–≤, {size_before} MB")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
            removed_files = self.log_cleaner.remove_old_rotated_logs(days_old=2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞ –∏ —Ä–æ—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            self.log_cleaner.check_and_rotate_if_needed()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            stats_after = self.log_cleaner.get_log_statistics()
            size_after = stats_after.get('total_size_mb', 0)
            files_after = stats_after.get('total_log_files', 0)
            
            freed_space = size_before - size_after
            
            self.logger.info(f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {files_after} —Ñ–∞–π–ª–æ–≤, {size_after} MB")
            if freed_space > 0:
                self.logger.info(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {freed_space:.2f} MB")
            
            self.logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
        if self.is_running:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤")
            self.is_running = False
        else:
            self.logger.info("–°–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def cleanup_now(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤"""
        self.logger.info("üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")
        await self.perform_cleanup()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_log_cleaner_service = None

def get_log_cleaner_service():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    global _log_cleaner_service
    if _log_cleaner_service is None:
        _log_cleaner_service = LogCleanerService()
    return _log_cleaner_service

async def start_log_cleaner():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    service = get_log_cleaner_service()
    await service.start_background_cleanup()

def stop_log_cleaner():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    service = get_log_cleaner_service()
    service.stop()

async def cleanup_logs_now():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤"""
    service = get_log_cleaner_service()
    await service.cleanup_now() 