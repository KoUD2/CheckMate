import logging
import asyncio
import re
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler
from services.ocr_service import process_image_ocr
from services.gemini_service import check_with_gemini
from services.api_service import register_user, decrement_user_free_checks, can_user_proceed_with_check, send_essay_result, send_table_task_result
from services.image_service import convert_image_to_base64
from utils.task37_parser import parse_task37_description, extract_criterion_scores_and_comments
from utils.task38_parser import parse_task38_description, extract_criterion_scores_and_comments_38
from config import CHOOSE_TASK, TASK_DESCRIPTION, GRAPH_IMAGE, TASK_SOLUTION, CHECKING, SHOW_ANALYSIS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–¥–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 37", callback_data="37")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 38", callback_data="38")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=reply_markup)
    
    return CHOOSE_TASK

async def task_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
    context.user_data['task_number'] = query.data
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
    await query.edit_message_text(f"–ó–∞–¥–∞–Ω–∏–µ {query.data}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üìÑ–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è"
    )
    
    return TASK_DESCRIPTION

async def get_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è
    context.user_data['task_description'] = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
    if context.user_data.get('task_number') == "38":
        await update.message.reply_text(
            "üìä –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"
        )
        return GRAPH_IMAGE
    else:
        await update.message.reply_text(
            "üìù–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É (—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è)"
        )
        return TASK_SOLUTION

async def get_graph_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = update.message.photo
    
    if photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo_file = photo[-1]
        photo_id = photo_file.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data['graph_image_id'] = photo_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38, file_id: {photo_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_message = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
            file = await context.bot.get_file(photo_id)
            file_path = f"temp_{photo_id}.jpg"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(file_path)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ MinIO
            await processing_message.edit_text("üîç –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64...")
            image_base64 = convert_image_to_base64(file_path)
            
            if image_base64:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['table_image_url'] = image_base64
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 (–¥–ª–∏–Ω–∞: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64")
                context.user_data['table_image_url'] = ""
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OCR.space API
            await processing_message.edit_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...")
            ocr_result = await process_image_ocr(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['graph_ocr_text'] = ocr_result
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await processing_message.edit_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            await update.message.reply_text(
                "üìù–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É (—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è)"
            )
            return TASK_SOLUTION
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
            await update.message.reply_text(
                "üìù–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É (—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è)"
            )
            return TASK_SOLUTION
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ, –ø—Ä–æ—Å–∏–º –µ—â–µ —Ä–∞–∑
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞. –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É."
        )
        return GRAPH_IMAGE

async def get_task_solution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
    context.user_data['task_solution'] = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    user_id = update.effective_user.id
    check_permission = await can_user_proceed_with_check(user_id)
    
    if not check_permission.get("can_proceed", False):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        reason = check_permission.get("reason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        FreeChecksLeft = check_permission.get("FreeChecksLeft", 0)
        
        await update.message.reply_text(
            f"‚ùå {reason}\n\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {FreeChecksLeft}\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription"
        )
        return ConversationHandler.END
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    status_message = await update.message.reply_text(
        "‚ú®–¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏, —Å–∫–æ—Ä–æ —Å–ª—É—á–∏—Ç—Å—è –º–∞–≥–∏—è..."
    )
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await status_message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É... (0%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        async def update_status(text):
            try:
                await status_message.edit_text(text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        task_number = context.user_data.get('task_number')
        
        if task_number == "37":
            # –î–ª—è –∑–∞–¥–∞–Ω–∏—è 37 —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            score, feedback, extra_info = await check_with_gemini(user_data=context.user_data, status_callback=update_status)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 37
            try:
                # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email, subject –∏ questions_theme
                task_description = context.user_data.get('task_description', '')
                parsed_data = parse_task37_description(task_description)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                scores = extra_info.get('scores', [0, 0, 0])
                responses = extra_info.get('responses', ['', '', ''])
                comments = extract_criterion_scores_and_comments(responses, scores)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
                essay_data = {
                    "comments": comments,
                    "email": parsed_data.get('email', ''),
                    "essay": context.user_data.get('task_solution', ''),
                    "k1": scores[0],
                    "k2": scores[1],
                    "k3": scores[2],
                    "questions_theme": parsed_data.get('questions_theme', ''),
                    "subject": parsed_data.get('subject', '')
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è 37 –Ω–∞ –±—ç–∫–µ–Ω–¥")
                backend_success = await send_essay_result(essay_data)
                
                if backend_success:
                    logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±—ç–∫–µ–Ω–¥")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –±—ç–∫–µ–Ω–¥")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
        elif task_number == "38":
            # –î–ª—è –∑–∞–¥–∞–Ω–∏—è 38 —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            score, feedback, extra_info = await check_with_gemini(user_data=context.user_data, status_callback=update_status)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38
            try:
                # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è opinion –∏ problem
                task_description = context.user_data.get('task_description', '')
                parsed_data = parse_task38_description(task_description)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–¥–ª—è –∑–∞–¥–∞–Ω–∏—è 38 - 5 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤)
                scores = extra_info.get('scores', [0, 0, 0, 0, 0])
                responses = extra_info.get('responses', ['', '', '', '', ''])
                comments = extract_criterion_scores_and_comments_38(responses, scores)
                
                # –ü–æ–ª—É—á–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                table_image_base64 = context.user_data.get('table_image_url', '')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
                table_task_data = {
                    "comments": comments,
                    "essay": context.user_data.get('task_solution', ''),
                    "k1": scores[0],
                    "k2": scores[1],
                    "k3": scores[2],
                    "k4": scores[3],
                    "k5": scores[4],
                    "opinion": parsed_data.get('opinion', ''),
                    "problem": parsed_data.get('problem', ''),
                    "table_image": table_image_base64
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è 38 –Ω–∞ –±—ç–∫–µ–Ω–¥")
                backend_success = await send_table_task_result(table_task_data)
                
                if backend_success:
                    logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞–Ω–∏—è 38 —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±—ç–∫–µ–Ω–¥")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞–Ω–∏—è 38 –Ω–∞ –±—ç–∫–µ–Ω–¥")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏—è 38 –Ω–∞ –±—ç–∫–µ–Ω–¥: {e}")
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–∑–æ–≤
            score, feedback = await check_with_gemini(user_data=context.user_data, status_callback=update_status)
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        decrement_success = await decrement_user_free_checks(user_id)
        if decrement_success:
            logger.info(f"–°—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_message.delete()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['feedback'] = feedback
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="show_analysis")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π: {score}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–ª–∞—Ö –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ feedback, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 38 –∏–ª–∏ 37
        criteria_info = ""
        
        if task_number in ["37", "38"]:
            # –ò—â–µ–º –±–ª–æ–∫ —Å –±–∞–ª–ª–∞–º–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–∑—ã–≤–∞
            criteria_pattern = r'–ë–∞–ª–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n(.*?)\n\n–û–±—â–∏–π –±–∞–ª–ª:'
            criteria_match = re.search(criteria_pattern, feedback, re.DOTALL)
            
            if criteria_match:
                criteria_info = f"\n\n{criteria_match.group(1)}"
        
        await update.message.reply_text(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞: {score} –±–∞–ª–ª–æ–≤.{criteria_info}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return SHOW_ANALYSIS
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}"
        logger.error(error_msg)
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )
        
        return ConversationHandler.END

async def show_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    feedback = context.user_data.get('feedback', "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = feedback.split('\n\n')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    messages = []
    current_message = ""
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–±–∑–∞—Ü–∞
        if len(current_message + paragraph + "\n\n") > 3800:  # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(paragraph) > 3800:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = re.split(r'(?<=[.!?])\s+', paragraph)
                temp_paragraph = ""
                
                for sentence in sentences:
                    if len(temp_paragraph + sentence + " ") > 3800:
                        if current_message:
                            messages.append(current_message)
                        current_message = temp_paragraph.strip()
                        temp_paragraph = sentence + " "
                    else:
                        temp_paragraph += sentence + " "
                
                if current_message:
                    messages.append(current_message)
                current_message = temp_paragraph.strip()
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                messages.append(current_message)
                current_message = paragraph + "\n\n"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            current_message += paragraph + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if current_message.strip():
        messages.append(current_message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = [msg for msg in messages if msg.strip()]
    
    if messages:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, –∑–∞–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.edit_message_text(
            text=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã:\n\n{messages[0]}",
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_id = None
        for i, message in enumerate(messages[1:], 2):
            try:
                sent_message = await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"{message}",
                    parse_mode='Markdown'
                )
                last_message_id = sent_message.message_id
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ {i}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞ –∏ –¥–∏–∑–ª–∞–π–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        # –ï—Å–ª–∏ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if last_message_id:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫
            rating_keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data="rating_like"),
                    InlineKeyboardButton("üëé", callback_data="rating_dislike")
                ]
            ]
            rating_markup = InlineKeyboardMarkup(rating_keyboard)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            await context.bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=last_message_id,
                reply_markup=rating_markup
            )
        else:
            # –ï—Å–ª–∏ –±—ã–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–±–∑–∞—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –Ω–µ–º—É
            rating_keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data="rating_like"),
                    InlineKeyboardButton("üëé", callback_data="rating_dislike")
                ]
            ]
            rating_markup = InlineKeyboardMarkup(rating_keyboard)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏
            await query.edit_message_reply_markup(reply_markup=rating_markup)
    else:
        # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        await query.edit_message_text(
            text="–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    return ConversationHandler.END

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    await register_user(user_id, username)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 37", callback_data="37")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏–µ 38", callback_data="38")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=reply_markup)
    
    return CHOOSE_TASK

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"""
    await update.message.reply_text(
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\n"
        "https://t.me/KonstUd"
    )
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    return ConversationHandler.END 