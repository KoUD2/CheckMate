#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è CheckMate
"""

from telegram import Update
from telegram.ext import ContextTypes
import logging
from services.log_cleaner_service import cleanup_logs_now, get_log_cleaner_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

ADMIN_IDS = {
    1054927360,
}

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def clear_logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_logs –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        service = get_log_cleaner_service()
        stats_before = service.log_cleaner.get_log_statistics()
        size_before = stats_before.get('total_size_mb', 0)
        files_before = stats_before.get('total_log_files', 0)
        
        await update.message.reply_text(
            f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤...\n\n"
            f"üìä –î–æ –æ—á–∏—Å—Ç–∫–∏:\n"
            f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {files_before}\n"
            f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {size_before} MB"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        await cleanup_logs_now()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        stats_after = service.log_cleaner.get_log_statistics()
        size_after = stats_after.get('total_size_mb', 0)
        files_after = stats_after.get('total_log_files', 0)
        
        freed_space = size_before - size_after
        
        await update.message.reply_text(
            f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:\n"
            f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {files_after}\n"
            f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {size_after} MB\n"
            f"   ‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {freed_space:.2f} MB"
        )
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {str(e)}"
        )

async def log_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    try:
        service = get_log_cleaner_service()
        stats = service.log_cleaner.get_log_statistics()
        
        main_size = stats.get('main_log_size_mb', 0)
        total_files = stats.get('total_log_files', 0)
        total_size = stats.get('total_size_mb', 0)
        log_files = stats.get('log_files', [])
        
        message = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í\n\n"
        message += f"üìÑ –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: {main_size} MB\n"
        message += f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n"
        message += f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} MB\n\n"
        
        if log_files:
            message += "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:\n"
            for i, log_file in enumerate(log_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                try:
                    import os
                    size_mb = round(os.path.getsize(log_file) / (1024 * 1024), 2)
                    filename = os.path.basename(log_file)
                    message += f"   {i}. {filename} - {size_mb} MB\n"
                except:
                    message += f"   {i}. {log_file} - –æ—à–∏–±–∫–∞\n"
            
            if len(log_files) > 10:
                message += f"   ... –∏ –µ—â–µ {len(log_files) - 10} —Ñ–∞–π–ª–æ–≤\n"
        else:
            message += "üìã –õ–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        await update.message.reply_text(message)
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )

async def admin_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_help –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return
    
    help_text = """
üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´

üìä /log_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤
üßπ /clear_logs - –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
‚ùì /admin_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.
    """
    
    await update.message.reply_text(help_text)
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º") 