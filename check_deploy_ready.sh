#!/bin/bash

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é CheckMate Bot..."
echo "=================================================="

# –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
errors=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:"

required_files=(
    "main.py"
    "webhook_server.py" 
    "config.py"
    "requirements.txt"
    "Dockerfile"
    "docker-compose.yml"
    ".env"
    "handlers/conversation_handlers.py"
    "services/gemini_service.py"
    "services/api_service.py"
    "utils/task37_parser.py"
    "utils/task38_parser.py"
    "services/image_service.py"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file - –û–¢–°–£–¢–°–¢–í–£–ï–¢"
        ((errors++))
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ prompts –∏ —Ñ–∞–π–ª–æ–≤ –≤ –Ω–µ–π
echo ""
echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:"

if [ -d "prompts" ]; then
    echo "  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è prompts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt_files=(
        "prompts/prompt1.txt"
        "prompts/prompt2.txt" 
        "prompts/prompt3.txt"
        "prompts/prompt38_1.txt"
        "prompts/prompt38_2.txt"
        "prompts/prompt38_3.txt"
        "prompts/prompt38_4.txt"
        "prompts/prompt38_5.txt"
    )
    
    for file in "${prompt_files[@]}"; do
        if [ -f "$file" ]; then
            echo "  ‚úÖ $file"
        else
            echo "  ‚ùå $file - –û–¢–°–£–¢–°–¢–í–£–ï–¢"
            ((errors++))
        fi
    done
else
    echo "  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è prompts - –û–¢–°–£–¢–°–¢–í–£–ï–¢"
    ((errors++))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo ""
echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"

if [ -f ".env" ]; then
    source .env
    
    required_vars=("TELEGRAM_BOT_TOKEN" "GEMINI_API_KEY" "OCR_API_KEY")
    
    for var in "${required_vars[@]}"; do
        if [ -n "${!var}" ]; then
            echo "  ‚úÖ $var —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else
            echo "  ‚ùå $var - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê"
            ((errors++))
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars=("YOOKASSA_SHOP_ID" "YOOKASSA_SECRET_KEY" "WEBHOOK_URL")
    echo ""
    echo "  üìã –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
    for var in "${optional_vars[@]}"; do
        if [ -n "${!var}" ]; then
            echo "    ‚úÖ $var —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else
            echo "    ‚ö†Ô∏è  $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        fi
    done
else
    echo "  ‚ùå –§–∞–π–ª .env - –û–¢–°–£–¢–°–¢–í–£–ï–¢"
    echo "     –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: cp env.example .env"
    ((errors++))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
echo ""
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker:"

if command -v docker &> /dev/null; then
    echo "  ‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
else
    echo "  ‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ((errors++))
fi

if command -v docker-compose &> /dev/null; then
    echo "  ‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version)"
else
    echo "  ‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ((errors++))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
echo ""
echo "üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:"

executable_files=("deploy.sh")

for file in "${executable_files[@]}"; do
    if [ -f "$file" ]; then
        if [ -x "$file" ]; then
            echo "  ‚úÖ $file –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
        else
            echo "  ‚ö†Ô∏è  $file –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π (chmod +x $file)"
        fi
    else
        echo "  ‚ùå $file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        ((errors++))
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é docker-compose
echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose:"

if [ -f "docker-compose.yml" ]; then
    if docker-compose config > /dev/null 2>&1; then
        echo "  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è docker-compose –≤–∞–ª–∏–¥–Ω–∞"
    else
        echo "  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ docker-compose"
        ((errors++))
    fi
fi

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo ""
echo "=================================================="

if [ $errors -eq 0 ]; then
    echo "üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!"
    echo ""
    echo "üöÄ –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:"
    echo "   ./deploy.sh"
    echo ""
    echo "üìã –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Make –∫–æ–º–∞–Ω–¥—ã:"
    echo "   make deploy"
    exit 0
else
    echo "‚ùå –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò: $errors"
    echo ""
    echo "üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º."
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   - QUICK_DEPLOY.md - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"
    echo "   - DEPLOY_PRODUCTION.md - –ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    exit 1
fi 