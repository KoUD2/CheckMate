#!/usr/bin/env python3

import os
import sys
import subprocess
from pathlib import Path

def setup_logrotate():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ logrotate"""
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ logrotate
    logrotate_config = """
# CheckMate Bot Logs
/app/logs/checkmate.log /var/log/checkmate*.log {
    daily
    rotate 2
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    maxage 2
    size 50M
    postrotate
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # docker restart checkmate-bot 2>/dev/null || true
    endscript
}

# Docker Container Logs
/var/lib/docker/containers/*/*.log {
    daily
    rotate 1
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    maxage 1
    size 100M
}
"""
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
        config_path = "/etc/logrotate.d/checkmate-bot"
        
        print("üìù –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é logrotate...")
        with open("/tmp/checkmate-logrotate", "w") as f:
            f.write(logrotate_config)
        
        # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–ø–∫—É
        subprocess.run(["sudo", "mv", "/tmp/checkmate-logrotate", config_path], check=True)
        subprocess.run(["sudo", "chmod", "644", config_path], check=True)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_path}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        result = subprocess.run(["sudo", "logrotate", "-d", config_path], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {result.stderr}")
            return False
        
        # –î–æ–±–∞–≤–∏—Ç—å –≤ crontab –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        print("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron...")
        cron_entry = "0 2 * * * /usr/sbin/logrotate /etc/logrotate.d/checkmate-bot\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π crontab
        result = subprocess.run(["sudo", "crontab", "-l"], 
                              capture_output=True, text=True)
        
        existing_cron = result.stdout if result.returncode == 0 else ""
        
        if "checkmate-bot" not in existing_cron:
            # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_cron = existing_cron + cron_entry
            
            with open("/tmp/new_crontab", "w") as f:
                f.write(new_cron)
            
            subprocess.run(["sudo", "crontab", "/tmp/new_crontab"], check=True)
            subprocess.run(["rm", "/tmp/new_crontab"], check=True)
            
            print("‚úÖ Cron –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            print("‚úÖ Cron –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ logrotate: {e}")
        return False

def immediate_cleanup():
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ª–æ–≥–æ–≤"""
    print("üßπ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...")
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    log_files = [
        "/app/logs/checkmate.log",
        "/app/checkmate.log",
        "checkmate.log",
        "logs/checkmate.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                with open(log_file, 'w') as f:
                    f.write("")
                print(f"‚úÖ –û—á–∏—â–µ–Ω: {log_file}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {log_file}: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
    try:
        subprocess.run(["sudo", "journalctl", "--vacuum-time=1d"], check=True)
        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")

if __name__ == "__main__":
    print("üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò –õ–û–ì–û–í")
    print("=" * 50)
    
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    immediate_cleanup()
    
    print("\n" + "=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
    if setup_logrotate():
        print("\n‚úÖ –£–°–ü–ï–®–ù–û! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üìÖ –õ–æ–≥–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00")
        print("üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: 50MB")
        print("üì¶ –•—Ä–∞–Ω–µ–Ω–∏–µ: 2 –¥–Ω—è")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å sudo –ø—Ä–∞–≤–∞–º–∏")
    
    print("\nüìã –î–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   ./emergency_disk_cleanup.sh  - –±—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞")
    print("   ./clean_server_disk.sh       - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞") 